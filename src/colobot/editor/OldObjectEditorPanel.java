/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package colobot.editor;

import colobot.editor.map.ColobotObject;
import colobot.editor.map.Map;
import colobot.editor.map.MapSource;
import colobot.editor.map.Objects;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Tomek
 */
public final class OldObjectEditorPanel extends javax.swing.JPanel implements MapSource
{
    private MapSource mapSource = null;
    private Map currentMap = null;
    
    private ColobotObject selectedObject = null;
    private ColobotObject templateObject = null;
    
    // map dragging support
    private boolean dragging = false;
    private double startX = 0.0;
    private double startY = 0.0;
    private double startCenterX = 0.0;
    private double startCenterY = 0.0;
    
    /**
     * Creates new form ObjectEditorPanel
     */
    @SuppressWarnings("LeakingThisInConstructor")
    public OldObjectEditorPanel()
    {
        initComponents();
        
        mapDisplay.setMapSource(this);
    }
    
    // ******* public **********
    
    @Override
    public Map getMap()
    {
        if(mapSource != null)
            return mapSource.getMap();
        else
            return null;
    }
    
    public void setMapSource(MapSource source)
    {
        this.mapSource = source;
        mapDisplay.repaint();
    }
    
    public void update()
    {
        if(mapSource == null) return;
        
        currentMap = mapSource.getMap();
        
        if(currentMap == null)
        {
            objectListTable.setModel(Objects.getEmptyTableModel());
        }
        else
        {
            Objects objects = currentMap.getObjects();
            objectListTable.setModel(objects.getTableModel());
        }
        
        selectObject(null);
        mapDisplay.repaint();
    }
    
    public void setHeightMap(BufferedImage image)
    {
        mapDisplay.setHeightMap(image);
        mapDisplay.repaint();
    }
    
    // ******* private **********
    
    private void revalidateTables()
    {
        if(currentMap != null)
            ((AbstractTableModel) currentMap.getObjects().getTableModel()).fireTableDataChanged();
        
        if(selectedObject != null)
            ((AbstractTableModel) selectedObject.getTableModel()).fireTableDataChanged();
    }
    
    private void selectObject(ColobotObject object)
    {
        selectedObject = object;
        
        if(object == null)
        {
            objectAttributeTable.setModel(ColobotObject.getEmptyTableModel());
            mapDisplay.clearSelection();
        }
        else
        {
            objectAttributeTable.setModel(object.getTableModel());
            mapDisplay.setSelected(object.getX(), object.getY());
        }
        
        revalidateTables();
    }
    
    private ColobotObject createInsect(String type)
    {
        ColobotObject object = new ColobotObject(type, 0, 0, 0);
        object.addAttribute("script1", "");
        object.addAttribute("cmdline", "");
        object.addAttribute("run", "1");
        return object;
    }
    
    private ColobotObject createBot(String type)
    {
        ColobotObject object = new ColobotObject(type, 0, 0, 0);
        object.addAttribute("power", "1");
        return object;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        objectListTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        objectAttributeTable = new javax.swing.JTable();
        centerObjectButton = new javax.swing.JButton();
        removeAttributeButton = new javax.swing.JButton();
        addAttributeButton = new javax.swing.JButton();
        deleteObjectButton = new javax.swing.JButton();
        updateObjectButton = new javax.swing.JButton();
        mapDisplay = new colobot.editor.MapDisplay();

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        objectListTable.setModel(Objects.getEmptyTableModel());
        jScrollPane1.setViewportView(objectListTable);

        objectAttributeTable.setModel(ColobotObject.getEmptyTableModel());
        jScrollPane2.setViewportView(objectAttributeTable);

        centerObjectButton.setText("Center object");
        centerObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centerObjectButtonActionPerformed(evt);
            }
        });

        removeAttributeButton.setText("Remote attribute");
        removeAttributeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAttributeButtonActionPerformed(evt);
            }
        });

        addAttributeButton.setText("Add attribute");
        addAttributeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAttributeButtonActionPerformed(evt);
            }
        });

        deleteObjectButton.setText("Delete object");
        deleteObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteObjectButtonActionPerformed(evt);
            }
        });

        updateObjectButton.setText("Update object");
        updateObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateObjectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(centerObjectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeAttributeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(addAttributeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteObjectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateObjectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateObjectButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteObjectButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addAttributeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeAttributeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(centerObjectButton)
                .addContainerGap())
        );

        mapDisplay.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                mapDisplayMouseWheelMoved(evt);
            }
        });
        mapDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mapDisplayMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapDisplayMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mapDisplayMousePressed(evt);
            }
        });
        mapDisplay.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                mapDisplayMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mapDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mapDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateObjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateObjectButtonActionPerformed
        if(currentMap == null) return;
        if(selectedObject == null) return;
        
        try
        {
            selectedObject.update();
            selectObject(selectedObject);
            mapDisplay.repaint();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Invalid attributes");
        }
    }//GEN-LAST:event_updateObjectButtonActionPerformed

    private void deleteObjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteObjectButtonActionPerformed
        if(currentMap == null) return;
        if(selectedObject == null) return;
        
        currentMap.getObjects().remove(selectedObject);
        selectObject(null);
        mapDisplay.repaint();
    }//GEN-LAST:event_deleteObjectButtonActionPerformed

    private void addAttributeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAttributeButtonActionPerformed
        if(selectedObject == null) return;
        
        try
        {
            selectedObject.addAttribute("name", "value");
        
            revalidateTables();
        }
        catch(Exception e)
        {
            // NOP
        }
    }//GEN-LAST:event_addAttributeButtonActionPerformed

    private void removeAttributeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAttributeButtonActionPerformed
        if(selectedObject == null) return;
        
        int row = objectAttributeTable.getSelectedRow();
        
        try
        {
            selectedObject.removeAttribute(row);
            revalidateTables();
        }
        catch(Exception e)
        {
            // NOP
        }
    }//GEN-LAST:event_removeAttributeButtonActionPerformed

    private void centerObjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centerObjectButtonActionPerformed
        if(selectedObject == null) return;
        
        double x = selectedObject.getX();
        double y = selectedObject.getY();
        
        mapDisplay.setCenter(x, y);
        mapDisplay.repaint();
    }//GEN-LAST:event_centerObjectButtonActionPerformed

    private void mapDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapDisplayMouseClicked
        if(currentMap == null) return;
        
        if(evt.getButton() == MouseEvent.BUTTON1)
        {
            if(templateObject == null) return;

            double x = mapDisplay.getMapX(evt.getX());
            double y = mapDisplay.getMapY(evt.getY());

            x = 1e-2 * Math.ceil(x * 1e+2);
            y = 1e-2 * Math.ceil(y * 1e+2);
            
            String pos = Double.toString(x) + ';' + Double.toString(y);

            ColobotObject object = templateObject.clone();

            object.setAttribute("pos", pos);
            object.update();

            currentMap.getObjects().add(object);
            selectObject(object);
            revalidateTables();
            mapDisplay.repaint();
        }
        else if(evt.getButton() == MouseEvent.BUTTON3)
        {
            ColobotObject object = null;
            
            double x = mapDisplay.getMapX(evt.getX());
            double y = mapDisplay.getMapY(evt.getY());

            for(ColobotObject o : currentMap.getObjects())
            {
                double dx = Math.abs(x - o.getX());
                double dy = Math.abs(y - o.getY());
                double dist = Math.sqrt(dx*dx+dy*dy);

                if(dist < 0.5)
                {
                    if(object == null)
                        object = o;
                }
            }

            selectObject(object);
            mapDisplay.repaint();
        }
    }//GEN-LAST:event_mapDisplayMouseClicked

    private void mapDisplayMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapDisplayMouseDragged
        if(dragging)
        {
            double scale = mapDisplay.getScale();
            double dx = (evt.getX() - startX) / scale;
            double dy = (evt.getY() - startY) / scale;
            
            double x = startCenterX - dx;
            double y = startCenterY + dy;
            
            mapDisplay.setCenter(x, y);
            mapDisplay.repaint();
        }
    }//GEN-LAST:event_mapDisplayMouseDragged

    private void mapDisplayMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapDisplayMousePressed
        if(evt.getButton() == MouseEvent.BUTTON1)
        {
            dragging = true;
            startX = evt.getX();
            startY = evt.getY();
            startCenterX = mapDisplay.getCenterX();
            startCenterY = mapDisplay.getCenterY();
        }
    }//GEN-LAST:event_mapDisplayMousePressed

    private void mapDisplayMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapDisplayMouseReleased
        if(evt.getButton() == MouseEvent.BUTTON1)
        {
            dragging = false;
        }
    }//GEN-LAST:event_mapDisplayMouseReleased

    private void mapDisplayMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_mapDisplayMouseWheelMoved
        double scale = mapDisplay.getScale();
        
        double steps = evt.getPreciseWheelRotation() * 0.5;
        
        mapDisplay.setScale(scale + steps);
        mapDisplay.repaint();
    }//GEN-LAST:event_mapDisplayMouseWheelMoved

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAttributeButton;
    private javax.swing.JButton centerObjectButton;
    private javax.swing.JButton deleteObjectButton;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private colobot.editor.MapDisplay mapDisplay;
    private javax.swing.JTable objectAttributeTable;
    private javax.swing.JTable objectListTable;
    private javax.swing.JButton removeAttributeButton;
    private javax.swing.JButton updateObjectButton;
    // End of variables declaration//GEN-END:variables
}
